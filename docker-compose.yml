
version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sistema_agentico_postgres
    environment:
      POSTGRES_DB: sistema_agentico
      POSTGRES_USER: sistema_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-sistema_password_secure_2025}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - sistema_agentico_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sistema_user -d sistema_agentico"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis para caché y sessions
  redis:
    image: redis:7-alpine
    container_name: sistema_agentico_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sistema_agentico_network
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password_secure_2025}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Aplicación Next.js
  app:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:3000}
        DATABASE_URL: postgresql://sistema_user:${POSTGRES_PASSWORD:-sistema_password_secure_2025}@postgres:5432/sistema_agentico
        NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
        NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-key-here}
        ABACUSAI_API_KEY: ${ABACUSAI_API_KEY}
    container_name: sistema_agentico_app
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://sistema_user:${POSTGRES_PASSWORD:-sistema_password_secure_2025}@postgres:5432/sistema_agentico
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET:-your-nextauth-secret-key-here}
      ABACUSAI_API_KEY: ${ABACUSAI_API_KEY}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password_secure_2025}@redis:6379
      
      # MyAlice.ai Configuration
      MYALICE_API_KEY: ${MYALICE_API_KEY}
      MYALICE_WEBHOOK_SECRET: ${MYALICE_WEBHOOK_SECRET}
      
      # WooCommerce Configuration
      WOOCOMMERCE_URL: ${WOOCOMMERCE_URL}
      WOOCOMMERCE_CONSUMER_KEY: ${WOOCOMMERCE_CONSUMER_KEY}
      WOOCOMMERCE_CONSUMER_SECRET: ${WOOCOMMERCE_CONSUMER_SECRET}
      
      # LLM Configuration
      LLM_ENDPOINT_URL: ${LLM_ENDPOINT_URL:-https://apps.abacus.ai}
      
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - sistema_agentico_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Nginx reverse proxy (opcional para producción)
  nginx:
    image: nginx:alpine
    container_name: sistema_agentico_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - sistema_agentico_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  sistema_agentico_network:
    driver: bridge
